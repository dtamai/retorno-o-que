package main

import (
	"errors"
	"fmt"
	"os"
	"time"
)

type Post struct {
	Content string
	PublishedAt time.Time
	Url string 
}

func (p Post) Slug() string {
	return p.Content[0:5]
}

func valid(content string) (Post, error) {
	if content == "" {
		return Post{}, errors.New("content can't be empty")
	} else {
		return Post{content}, nil
	}
}

func pubOrSched(p Post) (time.Time, error) {
	url := fmt.Sprintf("host/%s", post.Slug())
	p.Url = url

	if go_magic() {
		p.PublishedAt = time.Now()
		return time.Time{}, nil
	} else {
		return time.Now(), nil
	}
}

func main() {
	content := os.Args[1]

	p, err := valid(content)
	if err != nil {
		fmt.Println(err)
		return
	}

	schedAt, err := pubOrSched(p)
	if err != nil {
		fmt.Println("Failed to publish or schedule")
		return
	}

	if schedAt.IsZero() {
		fmt.Println("Published:", p.url)
	} else {
		fmt.Println("Scheduled:", p.url, "@", schedAt.Format("02/Jan"))
	}
}

func go_magic() bool {
	return false
}





