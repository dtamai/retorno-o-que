struct Post {
    content: String,
    url: Option<String>,
}

impl Post {
    fn draft(content: String) -> Post {
        Post { content, url: None }
    }

    fn slug(&self) -> String {
        self.content.chars().take(5).collect()
    }
}

fn validate(content: String) -> Result<Post, ErrorMsg> {
    if content.is_empty() {
        Err("content can't be empty".into())
    } else {
        Ok(Post::draft(content))
    }
}

fn publish(post: &mut Post) -> Result<(), ErrorMsg> {
    if rust_magic() {
        let url = format!("host/{}", post.slug());
        post.url = Some(url);

        Ok(())
    } else {
        Err("Failed to publish".into())
    }
}

fn main() -> Result<(), ErrorMsg> {
    let content = "content".to_string();
    let mut post = validate(content)?;
    publish(&mut post)?;

    println!("Published: {}", post.url.unwrap());
    Ok(())
}

fn rust_magic() -> bool {
    false
}

type ErrorMsg = String;






